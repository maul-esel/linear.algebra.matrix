system linear.algebra.matrix.semantics.Typing

validatorExtends linear.algebra.matrix.validation.AbstractMatrixValidator

import linear.algebra.matrix.matrix.*
import linear.algebra.matrix.interpreter.VariableRegister
import java.util.List

auxiliary {
	genericVarMatches(VariableRegister genReg, String variable, String value) : boolean
	checkParamTypes(VariableRegister genReg, List<VarDeclaration> declaredParams, List<Expression> suppliedParams)
	isGeneric(String size) : boolean
	consistentLineWidth(MultiLineMatrixLiteral lit) : boolean
	isSquare(SmartMatrixType type) : boolean
	matrixMultiplicationDefined(SmartMatrixType left, SmartMatrixType right) : boolean
	multipliedMatrixDimensions(SmartMatrixType left, SmartMatrixType right) : SmartMatrixType
	transpose(SmartMatrixType type) : SmartMatrixType
}

judgments {
	type |- Expression expr : output Type
		error "Cannot type " + stringRep(expr)
		source expr
	subtype |- Type sub <: Type sup
    vartype ||- VarDeclaration decl : output Type
}

auxiliary matrixMultiplicationDefined(SmartMatrixType left, SmartMatrixType right) {
	left.width == right.height
}

auxiliary multipliedMatrixDimensions(SmartMatrixType left, SmartMatrixType right) {
	new SmartMatrixType(left.height, right.width)
}

auxiliary isSquare(SmartMatrixType type) {
	type.height == type.width
}

auxiliary consistentLineWidth(MultiLineMatrixLiteral lit) {
	val width = lit.lines.get(0).getEntries().size()
	var consistent = true
	for (line : lit.lines) {
		consistent = consistent && line.getEntries().size() == width
	}
	consistent
}

auxiliary transpose(SmartMatrixType type) {
	new SmartMatrixType(type.width, type.height)
}

auxiliary isGeneric(String size) {
	size.charAt(0).toString() == '$'
}

auxiliary checkParamTypes(VariableRegister genReg, List<VarDeclaration> declaredParams, List<Expression> suppliedParams) {
	{ (suppliedParams.size() == declaredParams.size) }

	for (i : 0 ..< suppliedParams.size) {
		empty |- suppliedParams.get(i) : var Type valueType
		empty ||- declaredParams.get(i) : var Type paramType;

		var SmartMatrixType generic;
		if (valueType instanceof MatrixType && paramType instanceof MatrixType && (generic = SmartMatrixType.copy(paramType as MatrixType)).isGeneric()) {
			val exactType = valueType as MatrixType;
			(genericVarMatches(genReg, generic.height, exactType.height)
				&& (genericVarMatches(genReg, generic.width, exactType.width)))
			 or fail error "generic param type does not match" source suppliedParams.get(i)
		} else {
			empty |- valueType <: paramType
			or fail error "param type " + stringRep(valueType) + " does not match " + stringRep(paramType)
				source suppliedParams.get(i)
		}
	}
}

auxiliary genericVarMatches(VariableRegister genReg, String variable, String value) {
	if (isGeneric(variable)) {
		if (!genReg.exists(variable)) {
			genReg.add(variable, value, true)
			true
		} else
			(genReg.get(variable) == value)
	} else true
}

/* SUBTYPING */
rule SMatrixType
	derives G |- MatrixType sub <: MatrixType sup
from {
	SmartMatrixType.copy(sub).equals(sup) // TODO: take into account entry type subtype relation!
}

rule SDefault
	G |- Type sub <: Type sup
from {
	sub.eClass == sup.eClass
}

/* TYPING */
rule TTypedVarDecl
	G ||- TypedVarDeclaration variable : Type type
from {
	if (variable.type instanceof MatrixType)
		type = SmartMatrixType.copy(variable.type as MatrixType)
	else type = variable.type
}

rule TInferredVarDecl
	G ||- InferredVarDeclaration decl : Type type
from {
	G |- decl.value : type
}

axiom TIntegerLiteral
    G |- IntLiteral expr : MatrixFactory.eINSTANCE.createIntegerType()

axiom TBooleanLiteral
	G |- BooleanLiteral bool : MatrixFactory.eINSTANCE.createBooleanType()

axiom TGenericVariable
	G |- GenericVariable gen : MatrixFactory.eINSTANCE.createIntegerType()

rule TVariable
	G |- Variable variable : Type type
from {
	G ||- variable.ref : type
}

rule TFunctionCall
	G |- FunctionCall call : Type type
from {
	if (!(call.func.ref.returnType instanceof MatrixType)) {
		type = call.func.ref.returnType;
	} else {
		val retType = SmartMatrixType.copy(call.func.ref.returnType as MatrixType)
		type = retType

		val genericRegister = new VariableRegister();
		checkParamTypes(genericRegister, call.func.ref.params.params, call.params)

		if (retType.isGeneric())
			type = new SmartMatrixType(
				if (isGeneric(retType.height)) genericRegister.get(retType.height).toString() else retType.height,
				if (isGeneric(retType.width))  genericRegister.get(retType.width).toString()  else retType.width
			);
	}
}

rule TMultiLineMatrixLiteral
	G |- MultiLineMatrixLiteral lit : SmartMatrixType type
from {
	// TODO: take into account entry type	
	(consistentLineWidth(lit))

	val lines = lit.lines.size()
	val columns = lit.lines.get(0).getEntries().size()
	type = new SmartMatrixType(Integer.toString(lines), Integer.toString(columns))
}

rule TMatrixInit
	G |- MatrixInit init : SmartMatrixType type
from {
	type = new SmartMatrixType(init.lineMax, init.colMax)
}

rule TParenthesis
	G |- ParenthesizedExpression expr : Type type
from {
	G |- expr.inner : type
}

rule TVariableAssignment
	G |- VariableAssignment assign : Type vartype
from {
	G |- assign.variable : vartype
	G |- assign.value : var Type valtype
	G |- vartype <: valtype or fail error "value cannot be assigned" source assign.value
}

axiom TMatrixEntryAssignment
	G |- MatrixEntryAssignment assign : MatrixFactory.eINSTANCE.createIntegerType() // change for other entry types

rule TLogical
	G |- LogicalAndOr log : BooleanType bool
from {
	G |- log.left : bool
	G |- log.right : bool
}

rule TEquals
	G |- Equals eq : MatrixFactory.eINSTANCE.createBooleanType()
from {
	G |- eq.left : var Type leftType
	G |- eq.right : var Type rightType

	{ G |- leftType <: rightType } or { G |- rightType <: leftType }
}

rule TComparison
	G |- Comparison comp : MatrixFactory.eINSTANCE.createBooleanType()
from {
	G |- comp.left : var Type leftType
	G |- comp.right : var Type rightType
	(leftType instanceof IntegerType) && (rightType instanceof IntegerType) // matrices and booleans cannot be compared
}

rule TEquivalency
	G |- Equivalency eq : MatrixFactory.eINSTANCE.createBooleanType()
from {
	G |- eq.left : var Type leftType
	G |- eq.right : var Type rightType
	(leftType instanceof SmartMatrixType && rightType instanceof SmartMatrixType)
	G|- leftType <: rightType
}

rule TAddition
	G |- Addition add : Type type
from  {
	G |- add.left  : var Type leftType
	G |- add.right : var Type rightType

	{ G |- leftType <: rightType } or { G|- rightType <: leftType }
	type = leftType
}

rule TDivision
	G |- Division div : Type type
from {
	G |- div.left : var Type leftType
	G |- div.right : var Type rightType

	// TODO: use fraction
	false
}

rule TMultiplication
	G |- Multiplication mult : Type type
from {
	G |- mult.left  : var Type leftType
	G |- mult.right : var Type rightType

	{
		(leftType instanceof IntegerType && rightType instanceof IntegerType)
		type = leftType
	}
	or {
		(true && leftType instanceof IntegerType) // left scalar multiplication // change for other entry types
		type = rightType
	}
	or {
		(true && rightType instanceof IntegerType) // right scalar multiplication // change for other entry types
		type = leftType
	}
	or { // matrix multiplication
		(leftType instanceof SmartMatrixType && rightType instanceof SmartMatrixType)
		(matrixMultiplicationDefined(leftType as SmartMatrixType, rightType as SmartMatrixType))
		type = multipliedMatrixDimensions(leftType as SmartMatrixType, rightType as SmartMatrixType)
	}
}

rule TUnaryMinus
	G |- UnaryMinus un : Type type
from {
	G |- un.expr : type
}

rule TTransposition
	G |- Transposition t : SmartMatrixType type
from {
	G |- t.base : var SmartMatrixType baseType
	type = transpose(baseType)
}

rule TExponentiation
	G |- Exponentiation exp : Type baseType
from {
	G |- exp.base : baseType

	{ (baseType instanceof IntegerType) }
	or { (baseType instanceof SmartMatrixType && isSquare(baseType as SmartMatrixType)) }

	G |- exp.exp : var Type expType
	(expType instanceof IntegerType)
}

rule TNegation
	G |- Negation neg : BooleanType bool
from {
	G |- neg.expr : bool
}

rule TTernary
	G |- Ternary ter : Type type
from {
	G |- ter.cond : var BooleanType bool
	G |- ter.ifTrue : var Type trueType
	G |- ter.ifFalse : var Type falseType

	{
		G |- trueType <: falseType
		type = falseType
	} or {
		G |- falseType <: trueType
		type = trueType
	} or fail error "expression doesn't have matching type" source ter.ifFalse
}

rule TEntryAccess
	G |- EntryAccess acc : MatrixFactory.eINSTANCE.createIntegerType() // change for other entry types
from {
	var IntegerType intType
	G |- acc.matr : var SmartMatrixType matrType
	G |- acc.line : intType
	G |- acc.column : intType
}