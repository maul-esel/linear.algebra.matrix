system linear.algebra.matrix.semantics.Subtyping

validatorExtends linear.algebra.matrix.validation.AbstractMatrixValidator

import linear.algebra.matrix.matrix.Type
import linear.algebra.matrix.matrix.MatrixType
import linear.algebra.matrix.matrix.MathematicalType
import linear.algebra.matrix.matrix.IntegerType
import linear.algebra.matrix.matrix.RationalType
import linear.algebra.matrix.matrix.RealType
import linear.algebra.matrix.matrix.ComplexType
import linear.algebra.matrix.matrix.GenericType
import linear.algebra.matrix.matrix.TupleType
import linear.algebra.matrix.matrix.SetType
import linear.algebra.matrix.matrix.ListType

judgments {
	subtype |- Type sub <: Type sup
}

rule SMatrixType
	derives G |- MatrixType sub <: MatrixType sup
from {
	{ sub.dimensionsEqual(sup) }
	{ G |- sub.realEntryType <: sup.realEntryType }
}

rule SGenericTypes
	derives G |- GenericType sub <: GenericType sup
from {
	sub.name == sup.name
}

axiom SIntMathematical
	G |-IntegerType sub <: MathematicalType sup // integers are a subset of any number set used here

axiom SRationalReal
	G |- RationalType sub <: RealType sup

axiom SRationalComplex
	G |- RationalType sub <: ComplexType sup // rational numbers can be seen as a subset of the complex numbers

axiom SRealComplex
	G |- RealType sub <: ComplexType sup

rule STupleType
	derives G |- TupleType sub <: TupleType sup
from {
	{ sub.types.size == sup.types.size }
	for (i : 0..<sub.types.size) {
		G |- sub.types.get(i) <: sup.types.get(i)
	}
}

rule SSetType
	derives G |- SetType sub <: SetType sup
from {
	{ sub.entryType == null }
	or { G |- sub.entryType <: sup.entryType }

	!sup.isFinite || sub.isFinite // sup.isFinite => sub.isFinite // only a finite set can be used in place of a finite set 
}

rule SListType
	derives G |- ListType sub <: ListType sup
from {
	{ sub.entryType == null }
	or { G |- sub.entryType <: sup.entryType }
}

rule SListSetType // lists can be passed for sets
	derives G |- ListType sub <: SetType sup
from {
	{ sub.entryType == null }
	or { G |- sub.entryType <: sup.entryType }
}

rule SDefault
	G |- Type sub <: Type sup
from {
	sup.eClass.isSuperTypeOf(sub.eClass)
}