system linear.algebra.matrix.semantics.Subtyping

validatorExtends linear.algebra.matrix.validation.AbstractMatrixValidator

import linear.algebra.matrix.matrix.Type
import linear.algebra.matrix.matrix.MatrixType
import linear.algebra.matrix.matrix.MathematicalType
import linear.algebra.matrix.matrix.IntegerType
import linear.algebra.matrix.matrix.RationalType
import linear.algebra.matrix.matrix.RealType
import linear.algebra.matrix.matrix.ComplexType
import linear.algebra.matrix.matrix.GenericType

judgments {
	subtype |- Type sub <: Type sup
}

rule SMatrixType
	derives G |- MatrixType sub <: MatrixType sup
from {
	{ sub.dimensionsEqual(sup) }
	{ G |- sub.realEntryType <: sup.realEntryType }
}

rule SGenericTypes
	derives G |- GenericType sub <: GenericType sup
from {
	sub.name == sup.name
}

axiom SIntMathematical
	G |-IntegerType sub <: MathematicalType sup // integers are a subset of any number set used here

axiom SRationalReal
	G |- RationalType sub <: RealType sup

axiom SRationalComplex
	G |- RationalType sub <: ComplexType sup // rational numbers can be seen as a subset of the complex numbers

axiom SRealComplex
	G |- RealType sub <: ComplexType sup

rule SDefault
	G |- Type sub <: Type sup
from {
	sup.eClass.isSuperTypeOf(sub.eClass)
}