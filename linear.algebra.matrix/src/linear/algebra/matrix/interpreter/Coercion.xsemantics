system linear.algebra.matrix.interpreter.Coercion extends linear.algebra.matrix.interpreter.TypeChecks

import java.util.LinkedList

import linear.algebra.matrix.core.Rational
import linear.algebra.matrix.core.Complex
import linear.algebra.matrix.core.Tuple

import linear.algebra.matrix.core.Matrix
import linear.algebra.matrix.core.IntegerMatrix
import linear.algebra.matrix.core.RationalMatrix
import linear.algebra.matrix.core.RealMatrix
import linear.algebra.matrix.core.ComplexMatrix

import linear.algebra.matrix.matrix.Type
import linear.algebra.matrix.matrix.BooleanType
import linear.algebra.matrix.matrix.MathematicalType
import linear.algebra.matrix.matrix.IntegerType
import linear.algebra.matrix.matrix.RationalType
import linear.algebra.matrix.matrix.RealType
import linear.algebra.matrix.matrix.ComplexType
import linear.algebra.matrix.matrix.MatrixType
import linear.algebra.matrix.matrix.TupleType

auxiliary {
	createMatrix(MathematicalType entries, Integer lines, Integer columns) : Matrix<?>
	setMatrixEntry(Matrix<?> m, Integer i, Integer j, Number entry)
}

judgments {
	implicitCoerce |~ Object value >> Type type |> output Object
	explicitCast |~ Object value !>> Type type |> output Object
}

auxiliary createMatrix(MathematicalType entries, Integer lines, Integer columns) {
	switch (entries) {
		IntegerType  : new IntegerMatrix(lines, columns)
		RationalType : new RationalMatrix(lines, columns)
		RealType     : new RealMatrix(lines, columns)
		ComplexType  : new ComplexMatrix(lines, columns)
	}
}

auxiliary setMatrixEntry(Matrix<?> m, Integer i, Integer j, Number entry) {
	switch (m) {
		IntegerMatrix  : m.setEntry(i, j, entry as Integer)
		RationalMatrix : m.setEntry(i, j, entry as Rational)
		RealMatrix     : m.setEntry(i, j, entry as Double)
		ComplexMatrix  : m.setEntry(i, j, entry as Complex)
	}
}

axiom ICBooleanBoolean
	G |~ Boolean value >> BooleanType type |> value

// ... >> int
axiom ICIntegerInteger
	G |~ Integer value >> IntegerType type |> value

// ... >> rational
axiom ICIntegerRational
	G |~ Integer value >> RationalType type |> new Rational(value, 1)

axiom ICRationalRational
	G |~ Rational value >> RationalType type |> value

// ... >> real
axiom ICIntegerReal
	G |~ Integer value >> RealType type |> value.doubleValue

axiom ICRationalReal
	G |~ Rational value >> RealType type |> value.doubleValue

axiom ICRealReal
	G |~ Double value >> RealType type |> value

// ... >> complex
axiom ICIntegerComplex
	G |~ Integer value >> ComplexType type |> new Complex(value, 0)

axiom ICRationalComplex
	G |~ Rational value >> ComplexType type |> new Complex(value, 0)

axiom ICRealComplex
	G |~ Double value >> ComplexType type |> new Complex(value, 0)

axiom ICComplexComplex
	G |~ Complex value >> ComplexType type |> value

rule ICMatrix
	G |~ Matrix<?> value >> MatrixType type |> Matrix<?> out
from {
	(value.height.toString == type.height) && (value.width.toString == type.width)
	or fail error "matrix type dimensions incompatible"

	out = createMatrix(type.realEntryType, value.height, value.width)
	for (i : 1..value.height)
		for (j : 1..value.width) {
			G |~ value.getEntry(i, j) >> type.realEntryType |> var Number entry
			setMatrixEntry(out, i, j, entry)
		}
}

rule ICTuple
	G |~ Tuple value >> TupleType type |> Tuple out
from {
	value.length == type.types.length
	or fail error "tuples sizes incompatible"

	val values = new LinkedList<Object>()
	for (i : 0..<value.length) {
		G |~ value.get(i) >> type.types.get(i) |> var Object entry
		values.add(entry)
	}
	out = new Tuple(values.toArray)
}

rule ECDefault // fallback to implicit coercion (explicit casts are a superset of implicit coercions)
	G |~ Object value !>> Type type |> Object out
from {
	G |~ value >> type |> out
}

// ... !>> int
axiom ECNumberInteger
	G |~ Number value !>> IntegerType type |> value.intValue()

// ... !>> rational
axiom ECRealRational
	G |~ Double value !>> RationalType type |> Rational.approximate(value)

rule ECComplexRational
	G |~ Complex value !>> RationalType type |> Rational result
from {
	switch (re : value.realPart) {
		Integer  : new Rational(re, 1)
		Rational : re
		Double   : Rational.approximate(re)
		default  : Rational.approximate(re.doubleValue)
	}
}

// ... !>> real
axiom ECComplexReal
	G |~ Complex value !>> RealType type |> value.realPart.doubleValue

rule ECTuple
	G |~ Tuple value !>> TupleType type |> Tuple result
from {
	(value.length == type.types.size)

	val entries = new LinkedList<Object>()
	val iterator = type.types.iterator()
	for (e : value.entries) {
		G |~ e !>> iterator.next() |> var Object casted
		entries.add(casted)
	}

	result = new Tuple(entries.toArray)
}

rule ECMatrix
	G |~ Matrix<?> value !>> MatrixType type |> Matrix<?> result
from {
	(value.width.toString().equals(type.width) && value.height.toString().equals(type.height))

	result = createMatrix(type.entryType, value.height, value.width)
	for (i : 1..value.height)
		for (j : 1..value.width) {
			G |~ value.getEntry(i, j) !>> type.entryType |> var Number entry
			setMatrixEntry(result, i, j, entry)
		}
}