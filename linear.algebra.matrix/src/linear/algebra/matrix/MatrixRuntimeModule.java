/*
 * generated by Xtext
 */
package linear.algebra.matrix;

import com.google.inject.Binder;
import com.google.inject.assistedinject.FactoryModuleBuilder;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class MatrixRuntimeModule extends linear.algebra.matrix.AbstractMatrixRuntimeModule {
	public Class<? extends org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
        return linear.algebra.matrix.scoping.MatrixResourceDescriptionStrategy.class;
    }

	public Class<? extends org.eclipse.xtext.naming.IQualifiedNameConverter> bindIQualifiedNameConverter() {
		return linear.algebra.matrix.scoping.MatrixQualifiedNameConverter.class;
	}

	public Class<? extends linear.algebra.matrix.scoping.providers.CodeProvider> bindCodeProvider() {
		return linear.algebra.matrix.scoping.providers.StdlibCodeProvider.class;
	}

	@Override
	public void configure(Binder binder) {
		super.configure(binder);
		configureGlobalScopeFactory(binder);
		configureLocalScopeFactory(binder);
		configureInterpreterFactory(binder);
		configureImportManagerFactory(binder);
	}

	protected void configureGlobalScopeFactory(Binder binder) {
		binder.install(new FactoryModuleBuilder()
			.implement(org.eclipse.xtext.scoping.IScope.class,
				linear.algebra.matrix.scoping.MatrixGlobalScope.class)
			.build(linear.algebra.matrix.scoping.MatrixGlobalScopeFactory.class));
	}

	protected void configureLocalScopeFactory(Binder binder) {
		binder.install(new FactoryModuleBuilder()
			.implement(org.eclipse.xtext.scoping.IScope.class,
				linear.algebra.matrix.scoping.MatrixLocalScope.class)
			.build(linear.algebra.matrix.scoping.MatrixLocalScopeFactory.class));
	}

	protected void configureInterpreterFactory(Binder binder) {
		binder.install(new FactoryModuleBuilder()
			.implement(linear.algebra.matrix.interpreter.Interpreter.class,
				linear.algebra.matrix.interpreter.InterpreterImpl.class)
			.build(linear.algebra.matrix.interpreter.InterpreterFactory.class));
	}

	protected void configureImportManagerFactory(Binder binder) {
		binder.install(new FactoryModuleBuilder()
			.implement(linear.algebra.matrix.imports.ImportManager.class,
				linear.algebra.matrix.imports.ImportManagerImpl.class)
			.build(linear.algebra.matrix.imports.ImportManagerFactory.class));
	}
}
