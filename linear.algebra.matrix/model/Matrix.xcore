@Ecore(nsURI="http://www.algebra.linear/matrix/Matrix")
@GenModel(fileExtensions="mtx", forceOverwrite="true", updateClasspath="false", modelDirectory="/linear.algebra.matrix/emf-gen")
package linear.algebra.matrix.matrix

abstract class MatrixSyntaxElement {
}

class Code extends MatrixSyntaxElement {
	contains Import[] imports
	contains Line[] lines
}

class Import extends MatrixSyntaxElement {
	String source
}

abstract class Line extends MatrixSyntaxElement {
}

abstract class Action extends Line , IfBody {
}

abstract class VarDeclaration extends Action {
	boolean const
	String name
	contains Expression value
}

class TypedVarDeclaration extends VarDeclaration {
	contains Type ^type
}

class InferredVarDeclaration extends VarDeclaration {
}

class ParamDeclaration extends TypedVarDeclaration {
}

class MatrixInitVarDeclaration extends TypedVarDeclaration {
	contains derived Type intType // private

	op Type getType(){
		if (intType == null)
			intType = MatrixFactory.eINSTANCE.createIntegerType()
		intType
	}
}

class CombinedTupleVarDeclaration extends Action {
	contains Expression tuple
	contains TupleVarDeclarationComponent[] decls
}

abstract class TupleVarDeclarationComponent extends MatrixSyntaxElement {
}

class TupleVarDeclaration extends VarDeclaration, TupleVarDeclarationComponent {
	derived transient readonly int componentIndex
		get { (eContainer as CombinedTupleVarDeclaration).decls.indexOf(this) }

	contains Type ^type
}

class EmptyTupleVarDeclarationComponent extends TupleVarDeclarationComponent {
}

class ReturnStatement extends Action {
	contains Expression value
}

class FailureStatement extends Action {
	contains FailureMessage msg
}

class FailureMessage extends MatrixSyntaxElement {
	contains MessageFragment[] fragments
}

abstract class MessageFragment extends MatrixSyntaxElement {
}

class LiteralMessageFragment extends MessageFragment {
	String content
}

class ExpressionMessageFragment extends MessageFragment {
	contains Expression expr
}

class ProcRef extends MatrixSyntaxElement {
	refers ProcDeclaration ref
}

class ProcCall extends Action {
	contains ProcRef proc
	contains Expression[] params
}

class FromToLoop extends Action {
	contains Variable ^var
	contains Expression init
	contains Expression end
	contains Block body
}

class WhileLoop extends Action {
	contains Expression cond
	contains Block body
}

class Block extends IfBody {
	contains Action[] lines
}

abstract class IfBody extends MatrixSyntaxElement {
}

class IfElse extends Action {
	contains Expression cond
	contains IfBody ifTrue
	contains IfBody ^else
}

abstract class CallableDeclaration extends Line {
	boolean internal
	String name
	contains ParameterList params
	contains Block body
}

class FuncDeclaration extends CallableDeclaration {
	contains Type returnType
}

class ProcDeclaration extends CallableDeclaration {
}

class ParameterList extends MatrixSyntaxElement {
	contains ParamDeclaration[] params
}

/* TYPES */
abstract class Type extends MatrixSyntaxElement {
}

class BooleanType extends Type {
	op boolean equals(Object other) {
		other instanceof BooleanType
	}

	op int hashCode() {
		1 // random fixed number
	}
}

abstract class MathematicalType extends Type {
	op MathematicalType copy() {
		MatrixFactory.eINSTANCE.^create(eClass) as MathematicalType
	}
}

class IntegerType extends MathematicalType {
	op boolean equals(Object other) {
		other instanceof IntegerType
	}

	op int hashCode() {
		2 // random fixed number
	}
}

class RationalType extends MathematicalType {
	op boolean equals(Object other) {
		other instanceof RationalType
	}

	op int hashCode() {
		3 // random fixed number
	}
}

class RealType extends MathematicalType {
	op boolean equals(Object other) {
		other instanceof RealType
	}

	op int hashCode() {
		4 // random fixed number
	}
}

class ComplexType extends MathematicalType {
	op boolean equals(Object other) {
		other instanceof ComplexType
	}

	op int hashCode() {
		5 // random fixed number
	}
}

class GenericType extends MathematicalType {
	String name

	op MathematicalType copy() {
		val result = super.copy() as GenericType
		result.name = name
		result
	}

	op boolean equals(Object other) {
		(other instanceof GenericType) && (other as GenericType).name.contentEquals(name)
	}

	op int hashCode() {
		name.hashCode()
	}
}

class TupleType extends Type {
	contains Type[] types

	op boolean equals(Object other) {
		if (other instanceof TupleType)
			other.types.elementsEqual(types)
		else false
	}

	op int hashCode() {
		types.fold(0, [ sum, t | sum + t.hashCode() ])
	}
}

class MatrixType extends Type {
	contains MathematicalType entryType
	String height
	String width

	contains derived MathematicalType realEntryType
		get {
			entryType ?: MatrixFactory.eINSTANCE.createIntegerType()
		}

	op boolean hasGenericDimensions() {
		try {
			Integer.parseInt(height)
			Integer.parseInt(width)
		} catch (NumberFormatException e) {
			return true
		}
		false
	}

	op boolean hasGenericEntryType() {
		entryType instanceof GenericType
	}

	op boolean isGeneric() {
		hasGenericDimensions() || hasGenericEntryType()
	}

	op boolean dimensionsEqual(MatrixType other) {
		height.contentEquals(other.height) && width.contentEquals(other.width)
	}

	op boolean isSquare() {
		height == width
	}

	op boolean canMultiply(MatrixType right) {
		width == right.height
	}

	op boolean equals(Object other) {
		if (other instanceof MatrixType)
			other.height.contentEquals(height)
			&& other.width.contentEquals(width)
			&& other.realEntryType.equals(realEntryType)
		else false
	}

	op int hashCode() {
		height.hashCode + width.hashCode + realEntryType.hashCode
	}
}

class BooleanLiteral extends Expression {
	String value
}

class IntLiteral extends MathematicalLiteral {
	String value
}

class RealLiteral extends MathematicalLiteral {
	String value
}

class ImaginaryLiteral extends MathematicalLiteral {
	contains Expression coefficient
}

abstract class MathematicalLiteral extends Expression {
}

class MatrixInit extends Expression {
	contains MathematicalType entryType
	contains TypedVarDeclaration line
	String lineMax
	contains TypedVarDeclaration column
	String colMax
	contains Expression entry
}

class MultiLineMatrixLiteral extends Expression {
	contains MathematicalType entryType
	contains Dotting dot
	contains MatrixLiteralLine[] lines

	op boolean hasPlaceholders() {
		lines.map [ entries ].flatten.filter(PlaceholderEntry).size > 0
	}

	op boolean hasConsistentLineWidth() {
		lines.map [ entries.size ].toSet.size == 1
	}
}

class PlaceholderEntry extends MatrixEntry {
}

abstract class MatrixEntry extends MatrixSyntaxElement {
}

class MatrixLiteralLine extends MatrixSyntaxElement {
	contains MatrixEntry[] entries
}

class Dotting extends MatrixSyntaxElement {
	contains Expression fill
}

class GenericVariable extends Expression {
	String name
}

class Variable extends Expression, TupleAssignmentComponent {
	refers VarDeclaration ref
}

class Function extends MatrixSyntaxElement {
	refers FuncDeclaration ref
}

class FunctionCall extends Action , Expression {
	contains Function func
	contains Expression[] params
}

class TupleExpression extends Expression {
	contains Expression[] entries
}

abstract class Expression extends MatrixEntry {
}

abstract class UnaryExpression extends Expression {
	contains Expression expr
}

class DeterminantOrAbsoluteValue extends UnaryExpression {
}

class ParenthesizedExpression extends UnaryExpression {
}

class TypeCheckExpression extends UnaryExpression {
	contains Type ^type
}

class Negation extends UnaryExpression {
}

class Transposition extends UnaryExpression {
}

class UnaryMinus extends UnaryExpression {
}

abstract class BinaryExpression extends Expression {
	contains Expression left
	contains Expression right
}

class Exponentiation extends BinaryExpression {
	op Expression getBase() {
		left
	}

	op Expression getExp() {
		right
	}
}

class Division extends BinaryExpression {
}

class Multiplication extends BinaryExpression {
}

class Addition extends BinaryExpression {
	AdditionOp ^op
}

class Equivalency extends BinaryExpression {
}

class Comparison extends BinaryExpression {
	ComparisonOp ^op
}

class Equals extends BinaryExpression {
	EqualsOp ^op
}

class LogicalAndOr extends BinaryExpression {
	LogicalOp ^op
}

abstract class Assignment extends Action , Expression {
	contains Expression value
}

class VariableAssignment extends Assignment {
	contains Variable variable
}

class MatrixEntryAssignment extends Assignment {
	contains Expression matr
	contains Expression line
	contains Expression column
}

class TupleAssignment extends Assignment {
	contains TupleAssignmentComponent[] variables
	contains Expression tuple
}

abstract class TupleAssignmentComponent {
}

class EmptyTupleAssignmentComponent extends TupleAssignmentComponent {
}

enum AdditionOp {
	PLUS as "+"
	MINUS as "-" = 1
}

enum ComparisonOp {
	LESS as "<"
	GREATER as ">" = 1
	LESSOREQUAL as "<=" = 2
	GREATEROREQUAL as ">=" = 3
}

enum LogicalOp {
	AND as "&&"
	OR as "||" = 1
}

enum EqualsOp {
	EQUALS as "="
	NOTEQUALS as "!=" = 1
}

class EntryAccess extends Expression {
	contains Expression matr
	contains Expression line
	contains Expression column
}

class Ternary extends Expression {
	contains Expression cond
	contains Expression ifTrue
	contains Expression ifFalse
}