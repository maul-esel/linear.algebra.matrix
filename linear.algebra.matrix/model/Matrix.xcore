@Ecore(nsURI="http://www.algebra.linear/matrix/Matrix")
@GenModel(fileExtensions="mtx", forceOverwrite="true", updateClasspath="false", modelDirectory="/linear.algebra.matrix/emf-gen")
package linear.algebra.matrix.matrix

import org.eclipse.emf.common.util.BasicEList

type Iterable<T> wraps Iterable
type Class<T> wraps Class

abstract class MatrixSyntaxElement {
	op <T> T findFirstAncestor(Iterable<? extends Class<? extends T>> types) {
		var cont = eContainer
		while (cont != null && !cont.instanceOfAny(types))
			cont = cont.eContainer
		cont as T
	}

	op <T> boolean instanceOfAny(Object o, Iterable<? extends Class<? extends T>> types) {
		for (t : types)
			if (t.isInstance(o))
				return true
		false
	}

	op boolean alwaysReturnsOrFails() {
		false
	}

	op boolean alwaysAssigns(VarDeclaration variable) {
		false
	}
}

class Code extends MatrixSyntaxElement {
	contains Import[] imports
	contains Line[] lines
}

class Import extends MatrixSyntaxElement {
	String source
	String alias

	derived String name
	get {
		alias ?: source
	}
}

abstract class Line extends MatrixSyntaxElement {
}

abstract class Action extends Line , IfBody {
}

abstract class VarDeclaration extends Action {
	boolean const
	String name
	contains Expression value

	op boolean alwaysAssigns(VarDeclaration variable) {
		(value != null) && (this == variable || value.alwaysAssigns(variable))
	}
}

class TypedVarDeclaration extends VarDeclaration {
	contains Type ^type
}

class InferredVarDeclaration extends VarDeclaration {
}

class ParamDeclaration extends TypedVarDeclaration {
}

class ImplicitlyTypedVarDeclaration extends VarDeclaration {
	contains derived ImplicitlyTypedVarContainer variableContainer
	get {
		var c = eContainer
		while (c != null && !(c instanceof ImplicitlyTypedVarContainer && (c as ImplicitlyTypedVarContainer).implicitlyTypedVariables.contains(this)))
			c = c.eContainer
		c as ImplicitlyTypedVarContainer
	}
}

interface ImplicitlyTypedVarContainer extends MatrixSyntaxElement {
	op ImplicitlyTypedVarDeclaration[] getImplicitlyTypedVariables()
}

class MatrixInitVarDeclaration extends TypedVarDeclaration {
	contains derived Type intType // private

	op Type getType(){
		if (intType == null)
			intType = MatrixFactory.eINSTANCE.createIntegerType()
		intType
	}
}

class CombinedTupleVarDeclaration extends Action {
	contains Expression tuple
	contains TupleVarDeclarationComponent[] decls
}

abstract class TupleVarDeclarationComponent extends MatrixSyntaxElement {
}

class TupleVarDeclaration extends VarDeclaration, TupleVarDeclarationComponent {
	derived transient readonly int componentIndex
		get { (eContainer as CombinedTupleVarDeclaration).decls.indexOf(this) }

	contains Type ^type
}

class EmptyTupleVarDeclarationComponent extends TupleVarDeclarationComponent {
}

class ReturnStatement extends Action {
	contains Expression value

	op boolean alwaysReturnsOrFails() {
		true
	}

	op boolean alwaysAssigns(VarDeclaration variable) {
		value != null && value.alwaysAssigns(variable)
	}
}

class FailureStatement extends Action {
	contains FailureMessage msg

	op boolean alwaysReturnsOrFails() {
		true
	}
}

class FailureMessage extends MatrixSyntaxElement {
	contains MessageFragment[] fragments
}

abstract class MessageFragment extends MatrixSyntaxElement {
}

class LiteralMessageFragment extends MessageFragment {
	String content
}

class ExpressionMessageFragment extends MessageFragment {
	contains Expression expr
}

// CALLABLE
abstract class CallableInvocation<T extends CallableDeclaration> extends MatrixSyntaxElement {
	contains CallableRef<T> ref
	contains Expression[] params

	op boolean alwaysAssigns(VarDeclaration variable) {
		params.exists [ alwaysAssigns(variable) ]
	}
}

abstract class CallableRef<T extends CallableDeclaration> extends MatrixSyntaxElement {
	refers T ref
	contains GenericArguments genericArguments
}

class GenericArguments extends MatrixSyntaxElement {
	contains MathematicalType[] types
	String[] numbers
}

class ProcRef extends CallableRef<ProcDeclaration> {
}

class ProcCall extends Action, CallableInvocation<ProcDeclaration> {
	contains readonly derived CallableRef<ProcDeclaration> proc // for compatibility
		get {
			ref
		}
}

abstract class Loop extends Action {
	contains Block body
}

class FromToLoop extends Loop {
	contains Variable ^var
	contains Expression init
	contains Expression end

	op boolean alwaysAssigns(VarDeclaration variable) {
		init.alwaysAssigns(variable) || end.alwaysAssigns(variable)
	}
}

class WhileLoop extends Loop {
	contains Expression cond

	op boolean alwaysAssigns(VarDeclaration variable) {
		cond.alwaysAssigns(variable)
	}
}

class ForLoop extends Loop, ImplicitlyTypedVarContainer {
	contains ImplicitlyTypedVarDeclaration variable
	contains Expression listOrSet

	op boolean alwaysAssigns(VarDeclaration variable) {
		listOrSet.alwaysAssigns(variable)
	}

	op ImplicitlyTypedVarDeclaration[] getImplicitVariables() {
		new BasicEList(#[variable])
	}
}

class Block extends IfBody {
	contains Action[] lines

	op boolean alwaysReturnsOrFails() {
		lines.exists [ alwaysReturnsOrFails() ]
	}

	op boolean alwaysAssigns(VarDeclaration variable) {
		lines.exists [ alwaysAssigns(variable) ]
	}
}

abstract class IfBody extends MatrixSyntaxElement {
}

class IfElse extends Action {
	contains Expression cond
	contains IfBody ifTrue
	contains IfBody ^else

	op boolean alwaysReturnsOrFails() {
		if (^else == null) false
		else ifTrue.alwaysReturnsOrFails() && ^else.alwaysReturnsOrFails()
	}

	op boolean alwaysAssigns(VarDeclaration variable) {
		cond.alwaysAssigns(variable)
		|| (ifTrue.alwaysAssigns(variable) && ^else.alwaysAssigns(variable))
	}
}

abstract class CallableDeclaration extends Line {
	boolean internal
	String name
	contains ParameterList params
	contains Block body
	contains GenericType[] genericTypes
	contains GenericVariable[] genericVariables

	op boolean isGenericTypeDefined(GenericType t) {
		val paramTypes = params.params.map [ param | param.^type ]
		val matrixEntryTypes = paramTypes.filter(MatrixType).map [ paramType | paramType.realEntryType ]
		val definedTypes = ((paramTypes + matrixEntryTypes).filter(GenericType) + genericTypes).toSet
		definedTypes.contains(t)
	}
}

class FuncDeclaration extends CallableDeclaration {
	contains Type returnType
}

class ProcDeclaration extends CallableDeclaration {
}

class ParameterList extends MatrixSyntaxElement {
	contains ParamDeclaration[] params
}

/* TYPES */
abstract class Type extends MatrixSyntaxElement {
}

class BooleanType extends Type {
	op boolean equals(Object other) {
		other instanceof BooleanType
	}

	op int hashCode() {
		1 // random fixed number
	}
}

abstract class MathematicalType extends Type {
	op MathematicalType copy() {
		MatrixFactory.eINSTANCE.^create(eClass) as MathematicalType
	}
}

class IntegerType extends MathematicalType {
	op boolean equals(Object other) {
		other instanceof IntegerType
	}

	op int hashCode() {
		2 // random fixed number
	}
}

class RationalType extends MathematicalType {
	op boolean equals(Object other) {
		other instanceof RationalType
	}

	op int hashCode() {
		3 // random fixed number
	}
}

class RealType extends MathematicalType {
	op boolean equals(Object other) {
		other instanceof RealType
	}

	op int hashCode() {
		4 // random fixed number
	}
}

class ComplexType extends MathematicalType {
	op boolean equals(Object other) {
		other instanceof ComplexType
	}

	op int hashCode() {
		5 // random fixed number
	}
}

class GenericType extends MathematicalType {
	String name

	op MathematicalType copy() {
		val result = super.copy() as GenericType
		result.name = name
		result
	}

	op boolean equals(Object other) {
		(other instanceof GenericType) && (other as GenericType).name.contentEquals(name)
	}

	op int hashCode() {
		name.hashCode()
	}
}

class TupleType extends Type {
	contains Type[] types

	op boolean equals(Object other) {
		if (other instanceof TupleType)
			other.types.elementsEqual(types)
		else false
	}

	op int hashCode() {
		types.fold(0, [ sum, t | sum + t.hashCode() ])
	}
}

class MatrixType extends Type {
	contains MathematicalType entryType
	String height
	String width

	contains derived MathematicalType realEntryType
		get {
			entryType ?: MatrixFactory.eINSTANCE.createIntegerType()
		}

	op boolean hasGenericDimensions() {
		try {
			Integer.parseInt(height)
			Integer.parseInt(width)
		} catch (NumberFormatException e) {
			return true
		}
		false
	}

	op boolean hasGenericEntryType() {
		entryType instanceof GenericType
	}

	op boolean isGeneric() {
		hasGenericDimensions() || hasGenericEntryType()
	}

	op boolean dimensionsEqual(MatrixType other) {
		height.contentEquals(other.height) && width.contentEquals(other.width)
	}

	op boolean isSquare() {
		height == width
	}

	op boolean canMultiply(MatrixType right) {
		width == right.height
	}

	op boolean equals(Object other) {
		if (other instanceof MatrixType)
			other.height.contentEquals(height)
			&& other.width.contentEquals(width)
			&& other.realEntryType.equals(realEntryType)
		else false
	}

	op int hashCode() {
		height.hashCode + width.hashCode + realEntryType.hashCode
	}
}

abstract class ContainerType extends Type {
	contains Type entryType
}

class SetType extends ContainerType {
	boolean isFinite
}

class ListType extends ContainerType {
}

class BooleanLiteral extends Expression {
	String value
}

class IntLiteral extends MathematicalLiteral {
	String value
}

class RealLiteral extends MathematicalLiteral {
	String value
}

class ImaginaryLiteral extends MathematicalLiteral {
	contains Expression coefficient
}

abstract class MathematicalLiteral extends Expression {
}

class MatrixInit extends Expression {
	contains MathematicalType entryType
	contains TypedVarDeclaration line
	String lineMax
	contains TypedVarDeclaration column
	String colMax
	contains Expression entry

	op boolean alwaysAssigns(VarDeclaration variable) {
		entry.alwaysAssigns(variable)
	}
}

class MultiLineMatrixLiteral extends Expression {
	contains MathematicalType entryType
	contains Dotting dot
	contains MatrixLiteralLine[] lines

	op boolean hasPlaceholders() {
		lines.map [ entries ].flatten.filter(PlaceholderEntry).size > 0
	}

	op boolean hasConsistentLineWidth() {
		lines.map [ entries.size ].toSet.size == 1
	}

	op boolean alwaysAssigns(VarDeclaration variable) {
		lines.exists [ entries.exists [ alwaysAssigns(variable) ] ]
	}
}

class PlaceholderEntry extends MatrixEntry {
}

abstract class MatrixEntry extends MatrixSyntaxElement {
}

class MatrixLiteralLine extends MatrixSyntaxElement {
	contains MatrixEntry[] entries
}

class Dotting extends MatrixSyntaxElement {
	contains Expression fill
}

class GenericVariable extends Expression {
	String name
}

class Variable extends Expression, TupleAssignmentComponent {
	refers VarDeclaration ref
}

class Function extends CallableRef<FuncDeclaration> {
}

class FunctionCall extends Action, Expression, CallableInvocation<FuncDeclaration> {
	contains readonly derived CallableRef<FuncDeclaration> func // for compatibility
		get {
			ref
		}
}

class TupleExpression extends Expression {
	contains Expression[] entries

	op boolean alwaysAssigns(VarDeclaration variable) {
		entries.exists [ alwaysAssigns(variable) ]
	}
}

abstract class Expression extends MatrixEntry {
}

class ListLiteralExpression extends Expression {
	contains Expression[] entries

	op boolean alwaysAssigns(VarDeclaration variable) {
		entries.exists [ alwaysAssigns(variable) ]
	}
}

class SetLiteralExpression extends Expression {
	contains Expression[] entries

	op boolean alwaysAssigns(VarDeclaration variable) {
		entries.exists [ alwaysAssigns(variable) ]
	}
}

class SubsetExpression extends Expression, ImplicitlyTypedVarContainer {
	contains Expression superSet
	contains ImplicitlyTypedVarDeclaration entry
	contains Expression entryExpression
	contains Expression condition

	op boolean alwaysAssigns(VarDeclaration variable) {
		superSet.alwaysAssigns(variable)
	}

	op ImplicitlyTypedVarDeclaration[] getImplicitVariables() {
		new BasicEList(#[entry])
	}
}

class TypeSetExpression extends Expression, ImplicitlyTypedVarContainer {
	contains Type entryType
	contains ImplicitlyTypedVarDeclaration entry
	contains Expression condition

	op boolean alwaysAssigns(VarDeclaration variable) {
		condition.alwaysAssigns(variable)
	}

	op ImplicitlyTypedVarDeclaration[] getImplicitVariables() {
		new BasicEList(#[entry])
	}
}

class IsElementExpression extends Expression {
	contains Expression element
	contains Expression elementContainer

	op boolean alwaysAssigns(VarDeclaration variable) {
		element.alwaysAssigns(variable) || elementContainer.alwaysAssigns(variable)
	}
}

class ListIndexAccess extends Expression {
	contains Expression list
	contains Expression index

	op boolean alwaysAssigns(VarDeclaration variable) {
		list.alwaysAssigns(variable) || index.alwaysAssigns(variable)
	}
}

class ListIndexAssignment extends Assignment {
	contains Expression list
	contains Expression index

	op boolean alwaysAssigns(VarDeclaration variable) {
		list.alwaysAssigns(variable) || index.alwaysAssigns(variable) || value.alwaysAssigns(variable)
	}
}

class TypeComparisonExpression extends Expression {
	contains Type sub
	contains Type sup
}

abstract class UnaryExpression extends Expression {
	contains Expression expr

	op boolean alwaysAssigns(VarDeclaration variable) {
		expr.alwaysAssigns(variable)
	}
}

class CastExpression extends UnaryExpression {
	contains Type ^type
}

class DeterminantOrAbsoluteValue extends UnaryExpression {
}

class ParenthesizedExpression extends UnaryExpression {
}

class TypeCheckExpression extends UnaryExpression {
	contains Type ^type
}

class Negation extends UnaryExpression {
}

class Transposition extends UnaryExpression {
}

class UnaryMinus extends UnaryExpression {
}

abstract class BinaryExpression extends Expression {
	contains Expression left
	contains Expression right

	op boolean alwaysAssigns(VarDeclaration variable) {
		left.alwaysAssigns(variable) || right.alwaysAssigns(variable)
	}
}

class Exponentiation extends BinaryExpression {
	op Expression getBase() {
		left
	}

	op Expression getExp() {
		right
	}
}

class Division extends BinaryExpression {
}

class Multiplication extends BinaryExpression {
}

class Addition extends BinaryExpression {
	AdditionOp ^op
}

class Equivalency extends BinaryExpression {
}

class Comparison extends BinaryExpression {
	ComparisonOp ^op
}

class Equals extends BinaryExpression {
	EqualsOp ^op
}

class LogicalAndOr extends BinaryExpression {
	LogicalOp ^op

	op boolean alwaysAssigns(VarDeclaration variable) {
		left.alwaysAssigns(variable) && right.alwaysAssigns(variable)
	}
}

abstract class Assignment extends Action , Expression {
	contains Expression value
}

class VariableAssignment extends Assignment {
	contains Variable variable

	op boolean alwaysAssigns(VarDeclaration ^var) {
		variable.ref == ^var || value.alwaysAssigns(^var)
	}
}

class MatrixEntryAssignment extends Assignment {
	contains Expression matr
	contains Expression line
	contains Expression column

	op boolean alwaysAssigns(VarDeclaration variable) {
		matr.alwaysAssigns(variable) || line.alwaysAssigns(variable)
		|| column.alwaysAssigns(variable) || value.alwaysAssigns(variable)
	}
}

class TupleAssignment extends Assignment {
	contains TupleAssignmentComponent[] variables
	contains Expression tuple

	op boolean alwaysAssigns(VarDeclaration variable) {
		variables.contains(variable) || tuple.alwaysAssigns(variable)
	}
}

abstract class TupleAssignmentComponent {
}

class EmptyTupleAssignmentComponent extends TupleAssignmentComponent {
}

enum AdditionOp {
	PLUS as "+"
	MINUS as "-" = 1
}

enum ComparisonOp {
	LESS as "<"
	GREATER as ">" = 1
	LESSOREQUAL as "<=" = 2
	GREATEROREQUAL as ">=" = 3
}

enum LogicalOp {
	AND as "&&"
	OR as "||" = 1
}

enum EqualsOp {
	EQUALS as "="
	NOTEQUALS as "!=" = 1
}

class EntryAccess extends Expression {
	contains Expression matr
	contains Expression line
	contains Expression column

	op boolean alwaysAssigns(VarDeclaration variable) {
		matr.alwaysAssigns(variable) || line.alwaysAssigns(variable) || column.alwaysAssigns(variable)
	}
}

class Ternary extends Expression {
	contains Expression cond
	contains Expression ifTrue
	contains Expression ifFalse

	op boolean alwaysAssigns(VarDeclaration variable) {
		cond.alwaysAssigns(variable)
		|| (ifTrue.alwaysAssigns(variable) && ifFalse.alwaysAssigns(variable))
	}
}