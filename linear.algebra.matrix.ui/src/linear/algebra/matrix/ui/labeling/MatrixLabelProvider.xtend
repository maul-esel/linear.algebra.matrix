/*
* generated by Xtext
*/
package linear.algebra.matrix.ui.labeling

import com.google.inject.Inject
import linear.algebra.matrix.matrix.MultiLineMatrixLiteral
import linear.algebra.matrix.matrix.MatrixLiteralLine
import linear.algebra.matrix.matrix.PlaceholderEntry
import linear.algebra.matrix.matrix.IntLiteral
import linear.algebra.matrix.matrix.Multiplication
import linear.algebra.matrix.matrix.MatrixType

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class MatrixLabelProvider extends org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider {

	@Inject
	new(org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def text(MultiLineMatrixLiteral lit) {
		'[matrix literal]'
	}

	def text(MatrixType type) {
		'[matrix type] (' + type.height + ' Â° ' + type.width ')'
	}

	def text(MatrixLiteralLine line) {
		var str = ''
		for (entry : line.getEntries())
			str = str + (if (entry instanceof PlaceholderEntry) '.' else (entry as IntLiteral).value) + ' '
		str
	}

	def text(Multiplication mult) {
		if (mult.left instanceof MultiLineMatrixLiteral && mult.right instanceof MultiLineMatrixLiteral)
			'matrix multiplication'
		else if (mult.left instanceof MultiLineMatrixLiteral || mult.right instanceof MultiLineMatrixLiteral)
			'scalar multiplication'
		else
			'simple multiplication'
	}

	// Labels and icons can be computed like this:
	
//	def text(Greeting ele) {
//		'A greeting to ' + ele.name
//	}
//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}
