var myvar : int := 5;
var matr : (2 ° 3) := (dot 0) {
	1 . .
	0 1 0
};

test_generic(8, 8);
test_generic(3+1i, 3+2i);
test_generic(3+2i, 7);
test_generic(7, 3+1i);

def test_generic : (a : %t, b : %t) -> int {
	core::@printNumber(a);
	core::@printNumber(b);
	return 5;
}

def more_generic#[%s, %u, $n] : (a : %u) -> %s($n x $n) {
	var t : %s := $n;
	return init (var i..$n, var j..$n) ~> 0;
}

more_generic#[int, 4](4);

var t : (int, complex, (1 x 2)) := (2, 3i, {
	1 1
});
var i : int;
var n : (1 x 2);

(i,, n) := t;
(const ii : rational,, var nn) := t;
var ratio : rational := ii;

var matr2 := init (var i..2, var j..2) ~> i + j;

var mult : (2 ° 3) := matr;

var other : ℤ := myvar * 4;
var e : int := matr[1,1];
e := 4;
var r : ℚ := e / (1/2);

var x := 7;
var zl : int;
var zl_m := {
	zl := 5 5
};
core::@printNumber(zl_m[1,1]);
core::@printNumber(zl);


if (4/1 is int) {
	var z : real := 4i as real;
}

var CROSSED : (3 x 4) := {
	1 2 3 4
	1 2 3 4
	1 2 3 4
};

var test_im := 6i;

var cde : rational := 4 + 3/2;
var gre := 4/2 < 4;
var equ := 4 ≠ 4/1;

if (true) {
	var e : boolean;
	e := ¬true ∨ false;
}

internal def test : (A : ($n ° $m)) -> int {
	return $n;
}

proc @myproc : () {}

@myproc();

var left := {
	1 0
	0 1
};
var right := {
	0 1
	1 0
};
var result := left * right;
var all_one := left + right;
var transposed := right^T;
var gen := test(left) + 1;

var zzz := {
	-4 4 -8
	4 -4 0
	-8 6 -9
};
var diagonal_zzz := stdlib::diagonalize(zzz);
var strict_zzz := stdlib::strictly_diagonalize(zzz);

var id := {
	1 0
	0 1
};
var abs := |-4|;
var det := |left|;

var equals := left = id;
var equivalent := zzz ~ diagonal_zzz;