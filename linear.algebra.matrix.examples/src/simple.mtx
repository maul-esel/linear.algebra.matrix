int myvar := 5;
(2 ° 3) matr := (dot 0) {
	1 . .
	0 1 0
};

var matr2 := init (int i..2, int j..2) ~> i + j;

(2 ° 3) mult := matr;

ℤ ∋ other := myvar * 4;
int e := matr[1,1];
e := 4;
ℚ ∋ r := e / <1/2>;

rational cde := 4 + <3/2>;
var gre := <4/2> < 4;
var equ := 4 ≠ <4/1>;

if (true) {
	boolean e;
	e := ¬true ∨ false;
}

def add : (($n ° $m) A, ($n ° $m) B) -> ($n ° $m) {
	var c := A;
	return init (int i..$n, int j..$m) ~> A[i,j] + B[i,j];
}

internal def test : (($n ° $m) A ) -> int {
	return $n;
}

proc @myproc : () {}

@myproc();

var left := {
	1 0
	0 1
};
var right := {
	0 1
	1 0
};
var result := stdlib::mult(left, right);
var gen := test(left) + 1;

var zzz := {
	-4 4 -8
	4 -4 0
	-8 6 -9
};
var diagonal_zzz := stdlib::diagonalize(zzz);
var strict_zzz := stdlib::strictly_diagonalize(zzz);

var id := {
	1 0
	0 1
};
var equals := left = id;
var equivalent := stdlib::equivalent(zzz, diagonal_zzz);